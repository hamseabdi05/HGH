// <auto-generated />
using System;
using KMU.HisOrder.MVC.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KMU.HisOrder.MVC.Migrations
{
    [DbContext(typeof(KMUContext))]
    partial class KMUContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("hisorderplan_soa_soaid_seq");

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.ClinicSchedule", b =>
                {
                    b.Property<string>("ScheWeek")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("sche_week")
                        .HasComment("星期別");

                    b.Property<string>("ScheNoon")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("sche_noon")
                        .HasComment("午別");

                    b.Property<string>("ScheRoom")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("sche_room")
                        .HasComment("診間號碼");

                    b.Property<string>("shift")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("shift")
                        .HasComment("星期別");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<long?>("ScheCallNo")
                        .HasColumnType("bigint")
                        .HasColumnName("sche_call_no")
                        .HasComment("叫號號碼");

                    b.Property<DateTime?>("ScheCallTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sche_call_time")
                        .HasComment("Calling Time Update");

                    b.Property<string>("ScheDoctor")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("sche_doctor")
                        .HasComment("醫師職編");

                    b.Property<string>("ScheDoctorName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sche_doctor_name")
                        .HasComment("醫師姓名");

                    b.Property<string>("ScheDptCode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("sche_dpt_code")
                        .HasComment("科別代碼");

                    b.Property<string>("ScheDptName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sche_dpt_name")
                        .HasComment("科別名稱");

                    b.Property<string>("ScheOpenFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("sche_open_flag")
                        .HasComment("診次是否開放");

                    b.Property<string>("ScheRemark")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("sche_remark");

                    b.HasKey("ScheWeek", "ScheNoon", "ScheRoom", "shift")
                        .HasName("clinic_schedule_pkey");

                    b.ToTable("clinic_schedule", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.Dhis2Disease", b =>
                {
                    b.Property<int>("Dhis2Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dhis2_code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Dhis2Code"));

                    b.Property<string>("Diseases")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("diseases");

                    b.Property<int?>("ShowSeq")
                        .HasColumnType("integer")
                        .HasColumnName("show_seq");

                    b.HasKey("Dhis2Code")
                        .HasName("DHIS2DISEASES_pkey");

                    b.ToTable("dhis2_diseases", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.Hisorderplan", b =>
                {
                    b.Property<long>("Orderplanid")
                        .HasColumnType("bigint")
                        .HasColumnName("orderplanid");

                    b.Property<char?>("AddFlag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("add_flag")
                        .HasDefaultValueSql("'N'::bpchar");

                    b.Property<char?>("ChargeStatus")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("charge_status");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("create_user");

                    b.Property<DateTime?>("DcDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dc_date");

                    b.Property<char?>("DcStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("dc_status")
                        .HasDefaultValueSql("'0'::bpchar");

                    b.Property<string>("DcUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("dc_user");

                    b.Property<string>("DoseIndication")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("dose_indication");

                    b.Property<string>("DosePath")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("dose_path");

                    b.Property<string>("ExamLoc")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("exam_loc");

                    b.Property<DateTime?>("ExecDateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("exec_date_from");

                    b.Property<DateTime?>("ExecDateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("exec_date_to");

                    b.Property<char?>("ExecStatus")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("exec_status");

                    b.Property<char?>("FreeCharge")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("free_charge")
                        .HasDefaultValueSql("'N'::bpchar");

                    b.Property<string>("FreqCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("freq_code");

                    b.Property<string>("HealthId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("health_id")
                        .IsFixedLength();

                    b.Property<string>("HplanType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("hplan_type");

                    b.Property<string>("Inhospid")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("inhospid");

                    b.Property<char?>("KeepspecFlag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("keepspec_flag")
                        .HasDefaultValueSql("'N'::bpchar");

                    b.Property<string>("LocationCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("location_code");

                    b.Property<string>("MadeType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("made_type");

                    b.Property<short?>("MedBag")
                        .HasColumnType("smallint")
                        .HasColumnName("med_bag");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<string>("OrderDept")
                        .HasMaxLength(6)
                        .HasColumnType("character(6)")
                        .HasColumnName("order_dept")
                        .IsFixedLength();

                    b.Property<string>("OrderDr")
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("order_dr")
                        .IsFixedLength();

                    b.Property<string>("PlanCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("plan_code");

                    b.Property<short?>("PlanDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("plan_days")
                        .HasDefaultValueSql("0");

                    b.Property<string>("PlanDes")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("plan_des");

                    b.Property<char?>("PreopFlag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("preop_flag")
                        .HasDefaultValueSql("'N'::bpchar");

                    b.Property<DateTime?>("PrintDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("print_date");

                    b.Property<string>("PrintUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("print_user");

                    b.Property<decimal?>("QtyDaily")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("qty_daily");

                    b.Property<decimal?>("QtyDose")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("qty_dose");

                    b.Property<string>("Remark")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("remark");

                    b.Property<short>("SeqNo")
                        .HasColumnType("smallint")
                        .HasColumnName("seq_no");

                    b.Property<char>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'0'::bpchar");

                    b.Property<decimal?>("TotalQty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_qty");

                    b.Property<long?>("TriggerRecid")
                        .HasColumnType("bigint")
                        .HasColumnName("trigger_recid");

                    b.Property<string>("TriggerTablecode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("trigger_tablecode");

                    b.Property<string>("UnitDose")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit_dose");

                    b.Property<char?>("UrgFlag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("urg_flag")
                        .HasDefaultValueSql("'N'::bpchar");

                    b.HasKey("Orderplanid")
                        .HasName("hisorderplan_pkey");

                    b.HasIndex(new[] { "HealthId" }, "idx_hisorderplan_01");

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex(new[] { "HealthId" }, "idx_hisorderplan_01"), new[] { "C" });

                    b.HasIndex(new[] { "Inhospid" }, "idx_hisorderplan_02");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Inhospid" }, "idx_hisorderplan_02"), new[] { "bpchar_pattern_ops" });
                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex(new[] { "Inhospid" }, "idx_hisorderplan_02"), new[] { "C" });

                    b.ToTable("hisorderplan", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.HisorderplanAttr", b =>
                {
                    b.Property<long>("Orderplanatrrid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("orderplanatrrid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Orderplanatrrid"));

                    b.Property<string>("AttrCode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("attr_code");

                    b.Property<string>("Des")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("des");

                    b.Property<long>("Orderplanid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("orderplanid");

                    b.Property<string>("Parameter1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parameter_1");

                    b.Property<string>("Parameter2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parameter_2");

                    b.Property<string>("Parameter3")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parameter_3");

                    b.Property<string>("Parameter4")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parameter_4");

                    b.Property<string>("Parameter5")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parameter_5");

                    b.Property<string>("Parameter6")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parameter_6");

                    b.HasKey("Orderplanatrrid")
                        .HasName("hisorderplan_attr_pkey");

                    b.HasIndex("Orderplanid");

                    b.ToTable("hisorderplan_attr", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.Hisordersoa", b =>
                {
                    b.Property<long>("Soaid")
                        .HasColumnType("bigint")
                        .HasColumnName("soaid");

                    b.Property<string>("Context")
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("create_user");

                    b.Property<DateTime?>("DcDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dc_date");

                    b.Property<string>("DcUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("dc_user");

                    b.Property<string>("HealthId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("health_id")
                        .IsFixedLength();

                    b.Property<string>("Inhospid")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("inhospid");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("kind");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("character varying")
                        .HasColumnName("modify_user");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("source_type");

                    b.Property<char?>("Status")
                        .HasColumnType("char")
                        .HasColumnName("status");

                    b.Property<int?>("VersionCode")
                        .HasColumnType("integer")
                        .HasColumnName("version_code");

                    b.HasKey("Soaid")
                        .HasName("hisorderplan_soa_pkey");

                    b.HasIndex(new[] { "Inhospid" }, "idx_hisordersoa_01");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Inhospid" }, "idx_hisordersoa_01"), new[] { "bpchar_pattern_ops" });
                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex(new[] { "Inhospid" }, "idx_hisordersoa_01"), new[] { "C" });

                    b.HasIndex(new[] { "HealthId" }, "idx_hisordersoa_02");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "HealthId" }, "idx_hisordersoa_02"), new[] { "bpchar_pattern_ops" });
                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex(new[] { "HealthId" }, "idx_hisordersoa_02"), new[] { "C" });

                    b.ToTable("hisordersoa", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.home_physicalsign", b =>
                {
                    b.Property<int>("phyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("phyid"));

                    b.Property<string>("after_breakfast")
                        .HasColumnType("text");

                    b.Property<string>("after_dinner")
                        .HasColumnType("text");

                    b.Property<string>("before_breakfast")
                        .HasColumnType("text");

                    b.Property<string>("before_dinner")
                        .HasColumnType("text");

                    b.Property<string>("category")
                        .HasColumnType("text");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("evining_diastolic")
                        .HasColumnType("text");

                    b.Property<string>("evining_systolic")
                        .HasColumnType("text");

                    b.Property<string>("inhospid")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modify_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modify_user")
                        .HasColumnType("text");

                    b.Property<string>("morning_diastolic")
                        .HasColumnType("text");

                    b.Property<string>("morning_systolic")
                        .HasColumnType("text");

                    b.HasKey("phyid");

                    b.ToTable("home_physicalsign");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.kmu_chart_MergeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChrAddress")
                        .HasColumnType("text");

                    b.Property<string>("ChrAreaCode")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ChrBirthDate")
                        .HasColumnType("date");

                    b.Property<char?>("ChrCombineFlag")
                        .HasColumnType("character(1)");

                    b.Property<string>("ChrContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("ChrContactRelation")
                        .HasColumnType("text");

                    b.Property<string>("ChrEmgContact")
                        .HasColumnType("text");

                    b.Property<string>("ChrMobilePhone")
                        .HasColumnType("text");

                    b.Property<string>("ChrNationalId")
                        .HasColumnType("text");

                    b.Property<string>("ChrPatientFirstname")
                        .HasColumnType("text");

                    b.Property<string>("ChrPatientLastname")
                        .HasColumnType("text");

                    b.Property<string>("ChrPatientMidname")
                        .HasColumnType("text");

                    b.Property<char?>("ChrRefugeeFlag")
                        .HasColumnType("character(1)");

                    b.Property<string>("ChrRemark")
                        .HasColumnType("text");

                    b.Property<string>("ChrSex")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("chr_halth_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("merged_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("merger_user")
                        .HasColumnType("text");

                    b.Property<string>("mh_health_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("kmu_chart_MergeHistory");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.kmu_mental", b =>
                {
                    b.Property<int>("mntid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("mntid"));

                    b.Property<DateTime?>("createdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createuser")
                        .HasColumnType("text");

                    b.Property<string>("healthid")
                        .HasColumnType("text");

                    b.Property<string>("inhospid")
                        .HasColumnType("text");

                    b.Property<string>("modifyuser")
                        .HasColumnType("text");

                    b.Property<string>("patient_answer")
                        .HasColumnType("text");

                    b.Property<string>("plancode")
                        .HasColumnType("text");

                    b.Property<string>("plandes")
                        .HasColumnType("text");

                    b.HasKey("mntid");

                    b.ToTable("kmu_mental");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KMU_MergeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InhospId")
                        .HasColumnType("text");

                    b.Property<string>("chr_halth_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("merged_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("mh_health_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KMU_MergeHistory");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.kmu_ncd", b =>
                {
                    b.Property<int>("ncdid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ncdid"));

                    b.Property<DateTime?>("createdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createuser")
                        .HasColumnType("text");

                    b.Property<string>("healthid")
                        .HasColumnType("text");

                    b.Property<string>("inhospid")
                        .HasColumnType("text");

                    b.Property<string>("modifyuser")
                        .HasColumnType("text");

                    b.Property<string>("patient_answer")
                        .HasColumnType("text");

                    b.Property<string>("plancode")
                        .HasColumnType("text");

                    b.HasKey("ncdid");

                    b.ToTable("kmu_ncd");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuAttribute", b =>
                {
                    b.Property<string>("AttrCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("attr_code")
                        .HasComment("身分代碼");

                    b.Property<string>("AttrName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("attr_name")
                        .HasComment("身分說明");

                    b.Property<long?>("AttrRegFee")
                        .HasColumnType("bigint")
                        .HasColumnName("attr_reg_fee")
                        .HasComment("該身分預收的掛號費用");

                    b.Property<string>("AttrStatus")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("attr_status")
                        .HasComment("啟用狀態");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.HasKey("AttrCode")
                        .HasName("kmu_attribute_pkey");

                    b.ToTable("kmu_attribute", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuAuth", b =>
                {
                    b.Property<string>("UserIdno")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("user_idno");

                    b.Property<string>("ProjectId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("creator");

                    b.HasKey("UserIdno", "ProjectId")
                        .HasName("kmu_auths_pkey");

                    b.ToTable("kmu_auths", (string)null);

                    b.HasComment("User Auth File(Account permissions)");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuAuthsLog", b =>
                {
                    b.Property<string>("EditUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("edit_user");

                    b.Property<DateTime>("EditTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edit_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UserIdno")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("user_idno");

                    b.Property<string>("ProjectId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("project_id");

                    b.Property<string>("EditType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("edit_type");

                    b.HasKey("EditUser", "EditTime", "UserIdno", "ProjectId")
                        .HasName("kmu_auths_log_pkey");

                    b.ToTable("kmu_auths_log", (string)null);

                    b.HasComment("Auth change log");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuChart", b =>
                {
                    b.Property<string>("ChrHealthId")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("chr_health_id")
                        .IsFixedLength();

                    b.Property<string>("ChrAddress")
                        .HasColumnType("text")
                        .HasColumnName("chr_address");

                    b.Property<string>("ChrAreaCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("chr_area_code");

                    b.Property<DateOnly?>("ChrBirthDate")
                        .HasColumnType("date")
                        .HasColumnName("chr_birth_date");

                    b.Property<char?>("ChrCombineFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("chr_combine_flag");

                    b.Property<string>("ChrContactPhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("chr_contact_phone");

                    b.Property<string>("ChrContactRelation")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("chr_contact_relation")
                        .IsFixedLength();

                    b.Property<string>("ChrEmgContact")
                        .HasMaxLength(650)
                        .HasColumnType("character varying(650)")
                        .HasColumnName("chr_emg_contact");

                    b.Property<string>("ChrMobilePhone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("chr_mobile_phone");

                    b.Property<string>("ChrNationalId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("chr_national_id");

                    b.Property<string>("ChrPatientFirstname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("chr_patient_firstname");

                    b.Property<string>("ChrPatientLastname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("chr_patient_lastname");

                    b.Property<string>("ChrPatientMidname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("chr_patient_midname");

                    b.Property<char?>("ChrRefugeeFlag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("chr_refugee_flag")
                        .HasDefaultValueSql("'N'::bpchar")
                        .HasComment("refugee: Y");

                    b.Property<string>("ChrRemark")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("chr_remark");

                    b.Property<string>("ChrSex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("chr_sex");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("modify_user")
                        .IsFixedLength();

                    b.HasKey("ChrHealthId")
                        .HasName("KMUCHART_pkey");

                    b.HasIndex(new[] { "ChrPatientFirstname", "ChrPatientMidname", "ChrPatientLastname" }, "idx_kmu_chart_01");

                    b.HasIndex(new[] { "ChrMobilePhone" }, "idx_kmu_chart_02");

                    b.ToTable("kmu_chart", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuChartLog", b =>
                {
                    b.Property<string>("LogId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("log_id");

                    b.Property<string>("ChrAddress")
                        .HasColumnType("text")
                        .HasColumnName("chr_address");

                    b.Property<string>("ChrAreaCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("chr_area_code");

                    b.Property<DateOnly?>("ChrBirthDate")
                        .HasColumnType("date")
                        .HasColumnName("chr_birth_date");

                    b.Property<char?>("ChrCombineFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("chr_combine_flag");

                    b.Property<string>("ChrContactPhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("chr_contact_phone");

                    b.Property<string>("ChrContactRelation")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("chr_contact_relation")
                        .IsFixedLength();

                    b.Property<string>("ChrEmgContact")
                        .HasMaxLength(650)
                        .HasColumnType("character varying(650)")
                        .HasColumnName("chr_emg_contact");

                    b.Property<string>("ChrHealthId")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("chr_health_id")
                        .IsFixedLength();

                    b.Property<string>("ChrMobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("chr_mobile_phone");

                    b.Property<string>("ChrNationalId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("chr_national_id");

                    b.Property<string>("ChrPatientFirstname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("chr_patient_firstname");

                    b.Property<string>("ChrPatientLastname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("chr_patient_lastname");

                    b.Property<string>("ChrPatientMidname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("chr_patient_midname");

                    b.Property<char?>("ChrRefugeeFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("chr_refugee_flag");

                    b.Property<string>("ChrRemark")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("chr_remark");

                    b.Property<string>("ChrSex")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("chr_sex");

                    b.Property<char?>("LogMode")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("log_mode")
                        .HasComment("Command Mode: Insert, Update, Delete");

                    b.Property<DateTime?>("LogTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("log_time")
                        .HasComment("Modify Time");

                    b.Property<string>("LogUser")
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("log_user")
                        .IsFixedLength()
                        .HasComment("Modify by User");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("modify_user")
                        .IsFixedLength();

                    b.HasKey("LogId")
                        .HasName("KMUCHARTLOG_pkey");

                    b.HasIndex(new[] { "ChrHealthId" }, "idx_kmu_chart_log_01");

                    b.ToTable("kmu_chart_log", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuCoderef", b =>
                {
                    b.Property<string>("RefId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ref_id");

                    b.Property<string>("ModifyId")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_id");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time");

                    b.Property<string>("RefCasetype")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("ref_casetype");

                    b.Property<string>("RefCode")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ref_code");

                    b.Property<string>("RefCodetype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ref_codetype");

                    b.Property<string>("RefDefaultFlag")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("ref_default_flag")
                        .HasComment("是否預設啟用");

                    b.Property<string>("RefDes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("ref_des");

                    b.Property<string>("RefDes2")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("ref_des2");

                    b.Property<string>("RefName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ref_name");

                    b.Property<int?>("RefShowseq")
                        .HasColumnType("integer")
                        .HasColumnName("ref_showseq");

                    b.HasKey("RefId")
                        .HasName("kmu_coderef_pkey");

                    b.ToTable("kmu_coderef", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuCondition", b =>
                {
                    b.Property<string>("CndCodetype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cnd_codetype");

                    b.Property<string>("CndCode")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cnd_code");

                    b.Property<string>("CndDesc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cnd_desc");

                    b.Property<char?>("CndEnable")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("cnd_enable");

                    b.Property<string>("CndNoon")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cnd_noon");

                    b.Property<string>("CndRoom")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("cnd_room");

                    b.Property<string>("CndSymbol1")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("cnd_symbol1")
                        .IsFixedLength();

                    b.Property<string>("CndSymbol2")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("cnd_symbol2")
                        .IsFixedLength();

                    b.Property<string>("CndValue1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cnd_value1");

                    b.Property<string>("CndValue2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cnd_value2");

                    b.Property<char?>("CndWeek")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("cnd_week");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.HasKey("CndCodetype", "CndCode")
                        .HasName("kmu_condition_pkey");

                    b.ToTable("kmu_condition", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuDepartment", b =>
                {
                    b.Property<string>("DptCode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("dpt_code");

                    b.Property<string>("DptCategory")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("dpt_category");

                    b.Property<string>("DptDefaultAttr")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("dpt_default_attr")
                        .HasComment("預設身分別");

                    b.Property<long?>("DptDepth")
                        .HasColumnType("bigint")
                        .HasColumnName("dpt_depth");

                    b.Property<string>("DptName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dpt_name");

                    b.Property<string>("DptParent")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("dpt_parent");

                    b.Property<string>("DptRemark")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("dpt_remark");

                    b.Property<string>("DptStatus")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("dpt_status");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.HasKey("DptCode")
                        .HasName("kmu_department_pkey");

                    b.ToTable("kmu_department", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuIcd", b =>
                {
                    b.Property<string>("IcdCode")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("icd_code");

                    b.Property<int?>("Dhis2Code")
                        .HasColumnType("integer")
                        .HasColumnName("dhis2_code");

                    b.Property<string>("IcdCodeUndot")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("icd_code_undot")
                        .HasComment("ICD Code without decimal point.");

                    b.Property<string>("IcdEnglishName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("icd_english_name");

                    b.Property<string>("IcdType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icd_type")
                        .HasComment("CM/PCS");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("ModifyUser")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("parent_code")
                        .HasComment("Parent ICD Code for HisOrder UI Design.");

                    b.Property<string>("ShowMode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("show_mode")
                        .HasComment("Show position for HisOrder UI Design.");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("status")
                        .HasComment("ICD Code.");

                    b.Property<string>("Versioncode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("versioncode")
                        .HasComment("ICD 9 / ICD 10 ...");

                    b.HasKey("IcdCode")
                        .HasName("KMUICD_pkey");

                    b.HasIndex(new[] { "ParentCode" }, "idx_icd_01");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "ParentCode" }, "idx_icd_01"), new[] { "varchar_ops" });

                    b.ToTable("kmu_icd", (string)null);

                    b.HasComment("Diagnosis data.");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuMedfrequency", b =>
                {
                    b.Property<string>("FrqCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("frq_code");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("create_user");

                    b.Property<char>("EnableStatus")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("enable_status");

                    b.Property<string>("FreqDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("freq_desc");

                    b.Property<int?>("FrqForDays")
                        .HasColumnType("integer")
                        .HasColumnName("frq_for_days");

                    b.Property<int?>("FrqForTimes")
                        .HasColumnType("integer")
                        .HasColumnName("frq_for_times");

                    b.Property<int?>("FrqOneDayTimes")
                        .HasColumnType("integer")
                        .HasColumnName("frq_one_day_times");

                    b.Property<int?>("FrqSeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("frq_seq_no")
                        .HasDefaultValueSql("999");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.HasKey("FrqCode")
                        .HasName("kmu_medfrequency_pkey");

                    b.ToTable("kmu_medfrequency", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuMedfrequencyInd", b =>
                {
                    b.Property<string>("FrqCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("frq_code");

                    b.Property<string>("IndCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ind_code");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("create_user");

                    b.Property<char>("EnableStatus")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("enable_status");

                    b.Property<string>("IndDesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ind_desc");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<decimal?>("Showseq")
                        .HasPrecision(3)
                        .HasColumnType("numeric(3)")
                        .HasColumnName("showseq");

                    b.HasKey("FrqCode", "IndCode")
                        .HasName("kmu_medfrequency_ind_pkey");

                    b.ToTable("kmu_medfrequency_ind", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuMedicine", b =>
                {
                    b.Property<string>("MedId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("med_id");

                    b.Property<string>("BrandName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("brand_name");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("create_user");

                    b.Property<string>("DefaultFreq")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("default_freq")
                        .HasComment("開立時預設頻次(可空白)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("GenericName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("generic_name");

                    b.Property<string>("MedType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("med_type")
                        .HasComment("1-口服\n2-針劑\n3-外用");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<string>("PackSpec")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("pack_spec")
                        .HasComment("包裝單位(藥局發藥)");

                    b.Property<string>("RefDuration")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("ref_duration")
                        .HasComment("建議的用藥天數(不用預設)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("remarks")
                        .HasComment("其他備註說明");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("now()");

                    b.Property<char?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'0'::bpchar")
                        .HasComment("醫囑系統是否顯示");

                    b.Property<string>("UnitSpec")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit_spec")
                        .HasComment("醫囑單位");

                    b.HasKey("MedId")
                        .HasName("KMUMEDICINE_pkey");

                    b.ToTable("kmu_medicine", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuMedpathway", b =>
                {
                    b.Property<char>("MedType")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("med_type");

                    b.Property<string>("PathCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("path_code");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("create_user");

                    b.Property<char>("EnableStatus")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("enable_status");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<string>("PathDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("path_desc");

                    b.Property<decimal?>("Showseq")
                        .HasPrecision(3)
                        .HasColumnType("numeric(3)")
                        .HasColumnName("showseq");

                    b.HasKey("MedType", "PathCode")
                        .HasName("kmu_medpathway_pkey");

                    b.ToTable("kmu_medpathway", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuNonMedicine", b =>
                {
                    b.Property<string>("ItemId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("create_user");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("group_code");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("item_name");

                    b.Property<string>("ItemSpec")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("item_spec");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_type")
                        .HasComment("5.Laboratory 6.Radiology 7.Pathology 8.Material");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("remark");

                    b.Property<decimal?>("ShowSeq")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("show_seq");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<char>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'0'::bpchar");

                    b.Property<bool>("enabled")
                        .HasColumnType("boolean");

                    b.HasKey("ItemId")
                        .HasName("kmu_non_medicine_pkey");

                    b.ToTable("kmu_non_medicine", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuProject", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("creator");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("project_name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("url");

                    b.HasKey("ProjectId")
                        .HasName("kmu_projects_pkey");

                    b.ToTable("kmu_projects", (string)null);

                    b.HasComment("Auth Setting reference Project File(main function node)");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuSerialpool", b =>
                {
                    b.Property<string>("SerialOwner")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("serial_owner");

                    b.Property<string>("SerialMaxno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("serial_maxno");

                    b.Property<long?>("SerialNo")
                        .HasColumnType("bigint")
                        .HasColumnName("serial_no");

                    b.Property<string>("SerialPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("serial_prefix");

                    b.HasKey("SerialOwner")
                        .HasName("kmu_serialpool_pkey");

                    b.ToTable("kmu_serialpool", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuUser", b =>
                {
                    b.Property<string>("UserIdno")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("user_idno");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("account_status")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("creator");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UserBirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("user_birth_date");

                    b.Property<string>("UserCategory")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("user_category")
                        .HasComment("分類(1:Doctor,2:Nurse,3.Staff");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text")
                        .HasColumnName("user_email");

                    b.Property<string>("UserMobilePhone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("user_mobile_phone");

                    b.Property<string>("UserNameFirstname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name_firstname");

                    b.Property<string>("UserNameLastname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name_lastname");

                    b.Property<string>("UserNameMidname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name_midname");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_password");

                    b.Property<string>("UserSex")
                        .HasColumnType("text")
                        .HasColumnName("user_sex");

                    b.HasKey("UserIdno")
                        .HasName("kmu_users_pkey");

                    b.ToTable("kmu_users", (string)null);

                    b.HasComment("Account Basic File(user account )");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuUsersLog", b =>
                {
                    b.Property<string>("UserIdno")
                        .HasColumnType("text")
                        .HasColumnName("user_idno");

                    b.Property<string>("EventType")
                        .HasColumnType("text")
                        .HasColumnName("event_type");

                    b.Property<DateTime>("EventTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("event_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Ip")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("ip");

                    b.Property<string>("EventErrorInput")
                        .HasColumnType("text")
                        .HasColumnName("event_error_input");

                    b.Property<string>("EventLoggingUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("event_logging_user");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean")
                        .HasColumnName("is_success");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasKey("UserIdno", "EventType", "EventTime", "Ip")
                        .HasName("kmu_users_log_pkey");

                    b.ToTable("kmu_users_log", (string)null);

                    b.HasComment("Account change log(帳號基本檔修改紀錄表2023.03.03)");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.PhysicalSign", b =>
                {
                    b.Property<string>("PhyId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phy_id");

                    b.Property<string>("Inhospid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("inhospid");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<string>("PhyType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phy_type");

                    b.Property<string>("PhyValue")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("phy_value");

                    b.HasKey("PhyId")
                        .HasName("physical_sign_pkey");

                    b.HasIndex(new[] { "Inhospid", "PhyType" }, "idx_physical_sign_01");

                    b.ToTable("physical_sign", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.Registration", b =>
                {
                    b.Property<DateOnly>("RegDate")
                        .HasColumnType("date")
                        .HasColumnName("reg_date")
                        .HasComment("看診日");

                    b.Property<string>("RegDepartment")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("reg_department")
                        .HasComment("看診科別");

                    b.Property<string>("RegNoon")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("reg_noon")
                        .HasComment("午別");

                    b.Property<short>("RegSeqNo")
                        .HasColumnType("smallint")
                        .HasColumnName("reg_seq_no")
                        .HasComment("門診:看診號\n急診:檢傷序號");

                    b.Property<string>("Inhospid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("inhospid")
                        .HasComment("就醫序號");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<string>("RegAttrDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("reg_attr_desc")
                        .HasComment("身分備註");

                    b.Property<string>("RegAttribute")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("reg_attribute")
                        .HasComment("特殊身分->參考kmu_attribute");

                    b.Property<string>("RegBedNo")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("reg_bed_no")
                        .HasComment("急診床號");

                    b.Property<DateTime?>("RegCallTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reg_call_time")
                        .HasComment("叫號時間");

                    b.Property<DateTime?>("RegCreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reg_create_time")
                        .HasComment("create datetime for registration ");

                    b.Property<string>("RegDoctorId")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("reg_doctor_id")
                        .HasComment("醫師職邊");

                    b.Property<DateTime?>("RegEndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reg_end_time")
                        .HasComment("結束看診時間");

                    b.Property<DateTime?>("RegExamEndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reg_exam_end_time")
                        .HasComment("finish examining return time");

                    b.Property<DateTime?>("RegExamStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reg_exam_start_time")
                        .HasComment("click examining start time");

                    b.Property<string>("RegFollowCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("reg_follow_code");

                    b.Property<string>("RegFollowDesc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("reg_follow_desc");

                    b.Property<string>("RegHealthId")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("reg_health_id")
                        .IsFixedLength()
                        .HasComment("病歷號");

                    b.Property<string>("RegRoomNo")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("reg_room_no")
                        .HasComment("診間號");

                    b.Property<DateTime?>("RegStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reg_start_time")
                        .HasComment("開始看診時間");

                    b.Property<string>("RegStatus")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("reg_status")
                        .HasComment("看診狀態\nN:未看診\nT :暫存\n* :已看診\nC:取消掛號");

                    b.Property<string>("RegTriage")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("reg_triage")
                        .HasComment("檢傷分類\n0：一般門診(白燈)\n1：急診分類(綠燈)\n2：急診分類(黃燈)\n3：急診分類(紅燈)\n4：急診分類(黑燈)");

                    b.Property<DateTime?>("physign_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("reg_observe_end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("reg_observe_start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("score")
                        .HasColumnType("text");

                    b.Property<string>("shift")
                        .HasColumnType("text");

                    b.HasKey("RegDate", "RegDepartment", "RegNoon", "RegSeqNo")
                        .HasName("registration_pkey");

                    b.HasIndex(new[] { "Inhospid" }, "idx_registration_01");

                    b.ToTable("registration", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.TransactionCall", b =>
                {
                    b.Property<int>("CallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("call_id")
                        .HasComment("流水號");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CallId"));

                    b.Property<string>("CallPatientId")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("call_patient_id")
                        .IsFixedLength()
                        .HasComment("病歷號");

                    b.Property<DateOnly?>("CallRegDate")
                        .HasColumnType("date")
                        .HasColumnName("call_reg_date")
                        .HasComment("看診日");

                    b.Property<string>("CallRegDepartment")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("call_reg_department")
                        .HasComment("看診科");

                    b.Property<string>("CallRegNoon")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("call_reg_noon")
                        .HasComment("午別");

                    b.Property<short?>("CallRegSeqNo")
                        .HasColumnType("smallint")
                        .HasColumnName("call_reg_seq_no")
                        .HasComment("看診號");

                    b.Property<DateTime?>("CallTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("call_time")
                        .HasComment("叫號時間");

                    b.Property<long?>("Inhospid")
                        .HasColumnType("bigint")
                        .HasColumnName("inhospid")
                        .HasComment("就醫序號");

                    b.Property<string>("ModifySuer")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_suer");

                    b.Property<DateTime?>("ModifyTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("CallId")
                        .HasName("transaction_call_pkey");

                    b.ToTable("transaction_call", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.TransactionFee", b =>
                {
                    b.Property<int>("TransationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("transation_id")
                        .HasComment("流水號");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("TransationId"));

                    b.Property<string>("FeePaidFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("fee_paid_flag")
                        .HasComment("是否已收費");

                    b.Property<int?>("FeePaidMoney")
                        .HasColumnType("integer")
                        .HasColumnName("fee_paid_money")
                        .HasComment("收費金額");

                    b.Property<string>("FeeType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("fee_type")
                        .HasComment("收費項目");

                    b.Property<long?>("Inhospid")
                        .HasColumnType("bigint")
                        .HasColumnName("inhospid")
                        .HasComment("就醫序號");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("modify_user");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("transaction_time")
                        .HasComment("交易時間");

                    b.HasKey("TransationId")
                        .HasName("transaction_fee_pkey");

                    b.ToTable("transaction_fee", (string)null);
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.HisorderplanAttr", b =>
                {
                    b.HasOne("KMU.HisOrder.MVC.Models.Hisorderplan", "Orderplan")
                        .WithMany("HisorderplanAttrs")
                        .HasForeignKey("Orderplanid")
                        .IsRequired()
                        .HasConstraintName("hisorderplan_attr_fkey");

                    b.Navigation("Orderplan");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuAuth", b =>
                {
                    b.HasOne("KMU.HisOrder.MVC.Models.KmuUser", "UserIdnoNavigation")
                        .WithMany("KmuAuths")
                        .HasForeignKey("UserIdno")
                        .IsRequired()
                        .HasConstraintName("kmu_auths_fk01");

                    b.Navigation("UserIdnoNavigation");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.Hisorderplan", b =>
                {
                    b.Navigation("HisorderplanAttrs");
                });

            modelBuilder.Entity("KMU.HisOrder.MVC.Models.KmuUser", b =>
                {
                    b.Navigation("KmuAuths");
                });
#pragma warning restore 612, 618
        }
    }
}
